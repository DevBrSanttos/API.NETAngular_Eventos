---------- .NETCORE -----------

INICIAR PROJETO API
    dotnet new webapi -n nomeDoProjeto

EXECUTAR PROJETO
    dotnet watch run

CONFIGURAR BANCO DE DADOS (neste caso estou usando o SQLite)
    instalar pelo nuget 
	microsoft.EntityFrameworkCore.sqlite vers�o 5.0.2
    Configurar a string de conex�o no arquivo de configura��es do Development
	Configurar a conexão no Startup.cs

CRIANDO TABELA ATRAV�S DO ENTITY FRAMEWORK CORE
    inserir o model na classe ...Context (localizada em ProEventos.Persistence/Contextos/ProEventosContext)
	criar uma variavel public dbSet<nome da classe model> nomeDaTabela { get; set; }
    
    Executar comando dotnet ef migrations add init
    Atualizar banco com dotnet ef database update

MULTIPLAS CAMADAS
   Criar uma solu��o (sln)
	dotnet new sln -n nomeDaSolu��o
	Solu��o(sln) serve para referenciar projetos ou seja um projeto poder� enxergar outro
	Exemplo: dotnet new sln -n ProEventos

   Criar uma class library ou projeto standard
	dotnet new classlib -n nomeDaLibrary
	no nosso projeto foi criado 3 class library
		dotnet new classlib -n ProEventos.Persistence
		dotnet new classlib -n ProEventos.Domain
		dotnet new classlib -n ProEventos.Application

   Referenciar projetos
	dotnet sln nomeDaSolu��o add nomeDaLibrary
	Exemplo: dotnet sln proEventos.sln add ProEventos.Application
		 dotnet sln proEventos.sln add ProEventos.Domain
		 dotnet sln proEventos.sln add ProAgil.API
		 dotnet sln proEventos.sln add ProEventos.Persistence

	Adicionar referencia de um projeto em outro
		via linha de comando
			dotnet add nomeDoProjeto reference nomeDoProjetoReferenciado
		OU
		referenciar direto no .csproj do projeto
			<ItemGroup>
    				<ProjectReference Include="adicionar caminho do .csproj do projeto a ser enxergado" />
  			</ItemGroup>

		Exemplo via linha de comando: 
			dotnet add ProAgil.API reference ProEventos.Application
		Exemplo via .csproj:
			<ItemGroup>
    				<ProjectReference Include="..\ProEventos.Application\ProEventos.Application.csproj" />
  			</ItemGroup>

   CRIAR MIGRATIONS COM PROJETOS REFERENCIADOS
	dotnet ef migrations add initial -p nomeDoProjetoQuePossuiOContext -s nomeDoProjetoReferencia (obs: o projeto de referencia n�o pode ser standard)
	Exemplo: dotnet ef migrations add initial -p ProEventos.Persistence -s ProAgil.API
	Atualizar banco de dados: dotnet ef database update -s ProAgil.API


	IGNORAR LOOPING DE JSON AO FAZER BUSCAS NO BANCO DE DADOS EM TABELAS RELACIONADAS
		obs: tive que Atualizar a versão do sdk
		1° - Adicionar reference do Microsoft.AspNetCore.Mvc.NewtonsoftJson via NuGet
		2° - Adicionar este comando no Startup.cs
				services.AddControllers()
                    .AddNewtonsoftJson(x =>
                        x.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                        );

	ADICIONAR DELETE EM CASCATE QUANDO A TABELA TIVER MAIS DE UMA CHAVE ESTRANGEIRA
		obs: olhar o codigo no context: ProEventos.Persistence/Contextos/ProEventosContext.cs

	TRABALHANDO COM DTOS, AutoMapper e Data Annotations NO APPLICATION
		Adicionar AutoMapper pelo NuGet
			1° Adicionar referencia:
				AutoMapper.Extensions.Microsoft.DependencyInjection
				adicionada neste projeto versão 8.1.1

			2° Criar classe profile para fazer as referencias dos Dto e os Domains
			obs: a minha está dentro da pasta ProAgil.Application/Helpers

			3° Fazer configuração no Startup.cs
				depois do service.AddControllers()
				adicionar o codigo: services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

	Autenticação e Autorização JWT
		Instalar .NET Identity no ProEventos.Domain via nuget
			1° buscar por Microsoft.AspNetCore.Identity.EntityFrameworkCore
				obs: instalada versão 5.0.2
			Criado pastas Identity, Enum e seus conteúdos em ProEventos.Domain
			Alterado dbContext para IdentityDbContext e configurando relacionamento
				N-N entre User, UserRole e Role
			Atualizando database para acrescentar as novas tabelas de user, userRole e Role
				1° Criar migration:
					Comando: dotnet ef migrations add AdicionandoIdentity -p ProEventos.Persistence -s ProAgil.API
				2° Atualizar banco de dados:
					Comando: dotnet ef database update -s ProAgil.API
		Quando for criar o gerador de Token no TokenService em ProEventos.Application adicionar as bibliotecas via nuget
			System.IdentityModel.Tokens.Jwt
			Microsoft.IdentityModel.Tokens
		Configurar o IdentityCore no startup.cs
		Adicionar referencia do Autenticador JWT em ProAgil.API via nuget
			Microsoft.AspNetCore.Authentication.JwtBearer
			Microsoft.AspNetCore.Identity.EntityFrameworkCore
			Fazer configuração da autenticação no startup.cs
			adicionar dentro do metodo config o app.UseAuthentication(); antes do app.UseAuthorization



------- ANGULAR --------------

Criando Projeto Angular
    ng new nomeDoProjeto

Executar Projeto
    ng serve -o (-o para abrir diretamente o navegador)


ADICIONAR O BOOTSTRAP e FONTAWESOME
    Instalar
	npm i --save bootstrap @fortawesome/fontawesome-free

    Referenciar os dois arquivos
	acessar o arquivo styles.cs na raiz do peojeto angular
	    fazer o import dos arquivos
		@import '../node_modules/bootstrap/dist/css/bootstrap.min.css';
		@import '../node_modules/@fortawesome/fontawesome-free/css/all.min.css';


FAZER REQUISI��ES HTTP (API)
    Antes, permitir a requisi��o cruzada (error CORS)
	ir no arquivo Startup na API
		em ConfigureServices adicionar
			services.AddCors();

		em Configure adicionar antes do app.UseMvc();
			npm install --save @fortawesome/fontawesome-free
		
    entrar no arquivo app.module.ts
        dentro de imports
    	    importar o HttpClienteModule

    fazer inje��o de dependencia no construtor do component.ts

ADICIONAR O TOASTR NO PROJETO
 (TOASTR é a caixinha verde ou vermelha de mensagem que aparece quando adiciona/edita/exclui algum recurso ou da error)
 link: https://www.npmjs.com/package/ngx-toastr
	instalar no projeto via npm
		npm install ngx-toastr --save
	adicionar a referencia no angular.json em styles
		"node_modules/ngx-toastr/toastr.css"
	importar no app.module
		import { ToastrModule } from 'ngx-toastr';

ADICIONAR O SPINNER
 (SPINNER é a animação de carregando)
	link: https://www.npmjs.com/package/ngx-spinner
	instalar no projeto via npm
		npm install ngx-spinner --save
	adicionar a referencia no angular.json em styles
		"node_modules/ngx-spinner/animations/ball-scale-multiple.css"
	importar no app.module
		
	







